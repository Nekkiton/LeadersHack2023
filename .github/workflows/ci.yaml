name: 'Project check & deploy'

on:
  push:
    branches:
      - main
      - deployment

jobs:
  files-changed:
    runs-on: self-hosted
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Check for folder file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
  build-frontend:
    runs-on: self-hosted
    needs: files-changed
    if: needs.files-changed.outputs.frontend == 'true'
    defaults:
      run:
        shell: bash
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get node version
        id: node_version
        run: |
          echo "version=$(node -v)" >> $GITHUB_OUTPUT

      - name: Get node_modules cache
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node_version.outputs.version }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check build
        run: yarn build
  build-backend:
    runs-on: self-hosted
    needs: files-changed
    if: needs.files-changed.outputs.frontend == 'true'
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get node version
        id: node_version
        run: |
          echo "version=$(node -v)" >> $GITHUB_OUTPUT

      - name: Get node_modules cache
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node_version.outputs.version }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run build check
        run: yarn build

      - name: Run test
        run: yarn test --passWithNoTests
  build-and-push:
    runs-on: self-hosted
    env:
      HOME: "/root"
    needs:
      - files-changed
      - build-${{ matrix.context }}
    if: needs.files-changed.outputs.${{ matrix.context }} == 'true'
    strategy:
        fail-fast: false
        matrix:
          include:
            - dockerfile: backend/deployment/Dockerfile
              context: backend
              deployment: backend
              image: swr.ru-moscow-1.hc.sbercloud.ru/geek-battle-2023/backend
            - dockerfile: frontend/deployment/Dockerfile
              context: frontend
              deployment: frontend
              image: swr.ru-moscow-1.hc.sbercloud.ru/geek-battle-2023/frontend
    steps:      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=release-{{date 'YYYYMMDD-HHmm'}}-{{sha}}
        
      - name: Login to docker registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: swr.ru-moscow-1.hc.sbercloud.ru/geek-battle-2023
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy
        run: |
          helm upgrade ${{ matrix.deployment }} --atomic --history-max=3 --set image.tag=$DOCKER_METADATA_OUTPUT_VERSION ${{ matrix.context }}/deployment

      - name: Clean up
        run: |
          docker rmi $DOCKER_METADATA_OUTPUT_TAGS
          docker builder prune -f
